// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: echo.proto

#ifndef PROTOBUF_echo_2eproto__INCLUDED
#define PROTOBUF_echo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_echo_2eproto();
void protobuf_AssignDesc_echo_2eproto();
void protobuf_ShutdownFile_echo_2eproto();

class EchoRequest;
class EchoResponse;

// ===================================================================

class EchoRequest : public ::google::protobuf::Message {
 public:
  EchoRequest();
  virtual ~EchoRequest();

  EchoRequest(const EchoRequest& from);

  inline EchoRequest& operator=(const EchoRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EchoRequest& default_instance();

  void Swap(EchoRequest* other);

  // implements Message ----------------------------------------------

  EchoRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EchoRequest& from);
  void MergeFrom(const EchoRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string res_msg = 1;
  inline bool has_res_msg() const;
  inline void clear_res_msg();
  static const int kResMsgFieldNumber = 1;
  inline const ::std::string& res_msg() const;
  inline void set_res_msg(const ::std::string& value);
  inline void set_res_msg(const char* value);
  inline void set_res_msg(const char* value, size_t size);
  inline ::std::string* mutable_res_msg();
  inline ::std::string* release_res_msg();
  inline void set_allocated_res_msg(::std::string* res_msg);

  // @@protoc_insertion_point(class_scope:EchoRequest)
 private:
  inline void set_has_res_msg();
  inline void clear_has_res_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* res_msg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_echo_2eproto();
  friend void protobuf_AssignDesc_echo_2eproto();
  friend void protobuf_ShutdownFile_echo_2eproto();

  void InitAsDefaultInstance();
  static EchoRequest* default_instance_;
};
// -------------------------------------------------------------------

class EchoResponse : public ::google::protobuf::Message {
 public:
  EchoResponse();
  virtual ~EchoResponse();

  EchoResponse(const EchoResponse& from);

  inline EchoResponse& operator=(const EchoResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EchoResponse& default_instance();

  void Swap(EchoResponse* other);

  // implements Message ----------------------------------------------

  EchoResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EchoResponse& from);
  void MergeFrom(const EchoResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string resp_msg = 1;
  inline bool has_resp_msg() const;
  inline void clear_resp_msg();
  static const int kRespMsgFieldNumber = 1;
  inline const ::std::string& resp_msg() const;
  inline void set_resp_msg(const ::std::string& value);
  inline void set_resp_msg(const char* value);
  inline void set_resp_msg(const char* value, size_t size);
  inline ::std::string* mutable_resp_msg();
  inline ::std::string* release_resp_msg();
  inline void set_allocated_resp_msg(::std::string* resp_msg);

  // @@protoc_insertion_point(class_scope:EchoResponse)
 private:
  inline void set_has_resp_msg();
  inline void clear_has_resp_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* resp_msg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_echo_2eproto();
  friend void protobuf_AssignDesc_echo_2eproto();
  friend void protobuf_ShutdownFile_echo_2eproto();

  void InitAsDefaultInstance();
  static EchoResponse* default_instance_;
};
// ===================================================================

class EchoService_Stub;

class EchoService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline EchoService() {};
 public:
  virtual ~EchoService();

  typedef EchoService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void Echo(::google::protobuf::RpcController* controller,
                       const ::EchoRequest* request,
                       ::EchoResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(EchoService);
};

class EchoService_Stub : public EchoService {
 public:
  EchoService_Stub(::google::protobuf::RpcChannel* channel);
  EchoService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~EchoService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements EchoService ------------------------------------------

  void Echo(::google::protobuf::RpcController* controller,
                       const ::EchoRequest* request,
                       ::EchoResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(EchoService_Stub);
};


// ===================================================================


// ===================================================================

// EchoRequest

// required string res_msg = 1;
inline bool EchoRequest::has_res_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EchoRequest::set_has_res_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EchoRequest::clear_has_res_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EchoRequest::clear_res_msg() {
  if (res_msg_ != &::google::protobuf::internal::kEmptyString) {
    res_msg_->clear();
  }
  clear_has_res_msg();
}
inline const ::std::string& EchoRequest::res_msg() const {
  return *res_msg_;
}
inline void EchoRequest::set_res_msg(const ::std::string& value) {
  set_has_res_msg();
  if (res_msg_ == &::google::protobuf::internal::kEmptyString) {
    res_msg_ = new ::std::string;
  }
  res_msg_->assign(value);
}
inline void EchoRequest::set_res_msg(const char* value) {
  set_has_res_msg();
  if (res_msg_ == &::google::protobuf::internal::kEmptyString) {
    res_msg_ = new ::std::string;
  }
  res_msg_->assign(value);
}
inline void EchoRequest::set_res_msg(const char* value, size_t size) {
  set_has_res_msg();
  if (res_msg_ == &::google::protobuf::internal::kEmptyString) {
    res_msg_ = new ::std::string;
  }
  res_msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EchoRequest::mutable_res_msg() {
  set_has_res_msg();
  if (res_msg_ == &::google::protobuf::internal::kEmptyString) {
    res_msg_ = new ::std::string;
  }
  return res_msg_;
}
inline ::std::string* EchoRequest::release_res_msg() {
  clear_has_res_msg();
  if (res_msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = res_msg_;
    res_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void EchoRequest::set_allocated_res_msg(::std::string* res_msg) {
  if (res_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete res_msg_;
  }
  if (res_msg) {
    set_has_res_msg();
    res_msg_ = res_msg;
  } else {
    clear_has_res_msg();
    res_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// EchoResponse

// required string resp_msg = 1;
inline bool EchoResponse::has_resp_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EchoResponse::set_has_resp_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EchoResponse::clear_has_resp_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EchoResponse::clear_resp_msg() {
  if (resp_msg_ != &::google::protobuf::internal::kEmptyString) {
    resp_msg_->clear();
  }
  clear_has_resp_msg();
}
inline const ::std::string& EchoResponse::resp_msg() const {
  return *resp_msg_;
}
inline void EchoResponse::set_resp_msg(const ::std::string& value) {
  set_has_resp_msg();
  if (resp_msg_ == &::google::protobuf::internal::kEmptyString) {
    resp_msg_ = new ::std::string;
  }
  resp_msg_->assign(value);
}
inline void EchoResponse::set_resp_msg(const char* value) {
  set_has_resp_msg();
  if (resp_msg_ == &::google::protobuf::internal::kEmptyString) {
    resp_msg_ = new ::std::string;
  }
  resp_msg_->assign(value);
}
inline void EchoResponse::set_resp_msg(const char* value, size_t size) {
  set_has_resp_msg();
  if (resp_msg_ == &::google::protobuf::internal::kEmptyString) {
    resp_msg_ = new ::std::string;
  }
  resp_msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EchoResponse::mutable_resp_msg() {
  set_has_resp_msg();
  if (resp_msg_ == &::google::protobuf::internal::kEmptyString) {
    resp_msg_ = new ::std::string;
  }
  return resp_msg_;
}
inline ::std::string* EchoResponse::release_resp_msg() {
  clear_has_resp_msg();
  if (resp_msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = resp_msg_;
    resp_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void EchoResponse::set_allocated_resp_msg(::std::string* resp_msg) {
  if (resp_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete resp_msg_;
  }
  if (resp_msg) {
    set_has_resp_msg();
    resp_msg_ = resp_msg;
  } else {
    clear_has_resp_msg();
    resp_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_echo_2eproto__INCLUDED
